yum代理：

vim /etc/yum.conf

proxy=http://172.30.69.93:7890/
proxy=https://172.30.69.93:7890/

source /etc/profile

全局代理：

vim /etc/profile

http_proxy=http://172.30.69.93:7890/
https_proxy=https://172.30.69.93:7890/
ftp_proxy=http://172.30.69.93:7890/
export http_proxy
export https_proxy
export ftp_proxy

source /etc/profile

export http_proxy=http://172.30.69.93:7890/
export https_proxy=$http_proxy

docker代理： 

在执行docker pull时，是由守护进程docker来执行。 因此，代理需要配在docker的环境中。 而这个环境，则是受systemd所管控，因此实际是systemd的配置。

sudo mkdir -p /etc/systemd/system/docker.service.d
sudo touch /etc/systemd/system/docker.service.d/proxy.conf

在这个proxy.conf文件（可以是任意*.conf的形式）中，添加以下内容：

[Service]
Environment="HTTP_PROXY=http://proxy.example.com:8080/"
Environment="HTTPS_PROXY=http://proxy.example.com:8080/"
Environment="NO_PROXY=localhost,127.0.0.1"

重启生效！

代理配置完成后，reboot重启当然可以生效，但不重启也行。

docker build代理是在执行前设置的，所以修改后，下次执行立即生效。 Container代理的修改也是立即生效的，但是只针对以后启动的Container，对已经启动的Container无效。

docker代理的修改比较特殊，它实际上是改systemd的配置，因此需要重载systemd并重启docker才能生效。

sudo systemctl daemon-reload
sudo systemctl restart docker

docker的Container代理：

在容器运行阶段，如果需要代理上网，则需要配置~/.docker/config.json。 以下配置，只在Docker 17.07及以上版本生效。

{
 "proxies":
 {
   "default":
   {
     "httpProxy": "http://proxy.example.com:8080",
     "httpsProxy": "http://proxy.example.com:8080",
     "noProxy": "localhost,127.0.0.1,.example.com"
   }
 }
}
这个是用户级的配置，除了proxies，docker login等相关信息也会在其中。 而且还可以配置信息展示的格式、插件参数等。

此外，容器的网络代理，也可以直接在其运行时通过-e注入http_proxy等环境变量。 这两种方法分别适合不同场景。 config.json非常方便，默认在所有配置修改后启动的容器生效，适合个人开发环境。 在CI/CD的自动构建环境、或者实际上线运行的环境中，这种方法就不太合适，用-e注入这种显式配置会更好，减轻对构建、部署环境的依赖。 当然，在这些环境中，最好用良好的设计避免配置代理上网。

重启生效！

代理配置完成后，reboot重启当然可以生效，但不重启也行。

docker build代理是在执行前设置的，所以修改后，下次执行立即生效。 Container代理的修改也是立即生效的，但是只针对以后启动的Container，对已经启动的Container无效。

docker代理的修改比较特殊，它实际上是改systemd的配置，因此需要重载systemd并重启docker才能生效。

sudo systemctl daemon-reload
sudo systemctl restart docker


